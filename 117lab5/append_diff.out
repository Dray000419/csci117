[local ["L1","End1","L2","End2","H1","T1","H2","T2","LNew","Reverse","L3","L4","Out1"] [local ["EXU1","EXU2"] [local ["EXU3","EXU4"] [EXU3 = 1,local ["EXU5","EXU6"] [EXU5 = 2,EXU6 = End1,EXU4 = '|'(1:EXU5 2:EXU6)],EXU1 = '|'(1:EXU3 2:EXU4)],EXU2 = End1,L1 = '#'(1:EXU1 2:EXU2)],local ["EXU1","EXU2"] [local ["EXU3","EXU4"] [EXU3 = 3,local ["EXU5","EXU6"] [EXU5 = 4,EXU6 = End2,EXU4 = '|'(1:EXU5 2:EXU6)],EXU1 = '|'(1:EXU3 2:EXU4)],EXU2 = End2,L2 = '#'(1:EXU1 2:EXU2)],local ["EXU1","EXU2"] [EXU1 = H1,EXU2 = T1,L1 = '#'(1:EXU1 2:EXU2)],local ["EXU1","EXU2"] [EXU1 = H2,EXU2 = T2,L2 = '#'(1:EXU1 2:EXU2)],T1 = H2,local ["EXU1","EXU2"] [EXU1 = L1,EXU2 = T2,LNew = '#'(1:EXU1 2:EXU2)],skip/BLNew,Reverse = proc {$ Xs EXU1} [local ["ReverseD","Out"] [ReverseD = proc {$ Xs Y Y1 EXU2} [case Xs of nil() then [Y = Y1,EXU2 = Y] else [case Xs of '|'(1:X 2:Xr) then [local ["EXU3","EXU4","EXU5"] [EXU3 = Xr,EXU4 = Y,local ["EXU6","EXU7"] [EXU6 = X,EXU7 = Y1,EXU5 = '|'(1:EXU6 2:EXU7)],"ReverseD" "EXU3" "EXU4" "EXU5" "EXU2"]] else [skip]]],local ["EXU2","EXU3","EXU4"] [EXU2 = Xs,EXU3 = Out,EXU4 = nil(),"ReverseD" "EXU2" "EXU3" "EXU4" "Out"],EXU1 = Out]],local ["EXU1","EXU2"] [EXU1 = 4,local ["EXU3","EXU4"] [EXU3 = 3,local ["EXU5","EXU6"] [EXU5 = 2,local ["EXU7","EXU8"] [EXU7 = 1,EXU8 = nil(),EXU6 = '|'(1:EXU7 2:EXU8)],EXU4 = '|'(1:EXU5 2:EXU6)],EXU2 = '|'(1:EXU3 2:EXU4)],L3 = '|'(1:EXU1 2:EXU2)],local ["EXU1"] [EXU1 = L3,"Reverse" "EXU1" "Out1"],skip/BOut1,skip/f]]